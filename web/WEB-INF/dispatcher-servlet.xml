<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- static resources -->
    <mvc:default-servlet-handler />
    <!-- Introduce @Controller & @RequestMapping @GetMappnig, etc. -->
    <mvc:annotation-driven />
    <!-- Specify scan scope to make annotation controllers working -->
    <context:component-scan base-package="black.mesa.springmvcdemo.controller"/>

    <!-- Scan for autowired -->
<!--    <context:component-scan base-package="black.mesa.springmvcdemo.service"/>-->

    <!-- Define annotation controller class as bean one by one, also works. -->
<!--    <bean id="annotationHello" class="black.mesa.springmvcdemo.controller.AnnotationHelloController"></bean>-->

    <!-- BeanNameUrl handler mapping -->
    <bean id="handlerMapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
    </bean>
    <!-- demonstrate set multiple urls in one config node -->
    <bean name="/hello,/hi" class="black.mesa.springmvcdemo.controller.HelloController">
        <property name="viewName" value="hello"></property>
    </bean>
    <!-- demonstrate set two different url patterns mapping to one controller class -->
    <bean name="/greeting" class="black.mesa.springmvcdemo.controller.HelloController">
        <property name="viewName" value="hello"></property>
    </bean>

    <!-- demonstrate order of exec chain of handler mapping -->
    <bean name="/ordered-hello" class="black.mesa.springmvcdemo.controller.HelloController">
        <property name="viewName" value="hello"></property>
    </bean>

    <!-- SimpleUrl handler mapping -->
    <!-- Compare with BeanNameUrlHandlerMapping class, SimpleUrlHandlerMapping class able to decouple the
         presentation layer and logic layer's works, no need to make the bean name as same as the request
         url path
    -->
    <bean id="simpleUrlHandlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
<!--        <property name="order" value="1"></property>-->
        <property name="mappings">
            <props>
                <prop key="/well-met">helloController</prop>
                <!-- demonstrate order of exec chain of handler mapping -->
                <prop key="/ordered-hello">wellMetController</prop>
            </props>

        </property>
    </bean>

    <bean name="helloController" class="black.mesa.springmvcdemo.controller.HelloController">
        <property name="viewName" value="hello"></property>
    </bean>

    <bean name="wellMetController" class="black.mesa.springmvcdemo.controller.HelloController">
        <property name="viewName" value="wellMet"></property>
    </bean>

    <!-- ViewResolver -->
    <!-- DispatcherServlet can accept multiple view resolvers. -->
<!--    <bean id="resourceBundleViewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver">-->
<!--        <property name="order" value="1"></property>-->
<!--    </bean>-->

    <bean id="viewResolver"  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!-- oracle dataSource bean -->
    <!-- common-dbcp2-2.7.0 -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
        <property name="url" value="jdbc:oracle:thin:@192.168.110.132:1521:xe"></property>
        <property name="username" value="TEST"></property>
        <property name="password" value="p@ssw0rd"></property>
    </bean>

<!--     session factory bean-->
<!--     hibernate-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
<!--        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>-->
        <property name="packagesToScan" value="black.mesa.springmvcdemo.entity" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- Step 4: Enable configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="transactionManager" />

</beans>